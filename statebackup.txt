#include <Wire.h>
#include <ESP8266WiFi.h>
const int MPU_addr = 0x68; // I2C address of the MPU-6050
int16_t AcX, AcY, AcZ, Tmp, GyX, GyY, GyZ;
float ax = 0, ay = 0, az = 0, gx = 0, gy = 0, gz = 0;
boolean fall = false;     // stores if a fall has occurred
boolean trigger1 = false; // stores if first trigger (lower threshold) has occurred
boolean trigger2 = false; // stores if second trigger (upper threshold) has occurred
boolean trigger3 = false; // stores if third trigger (orientation change) has occurred
byte trigger1count = 0;   // stores the counts past since trigger 1 was set true
byte trigger2count = 0;   // stores the counts past since trigger 2 was set true
byte trigger3count = 0;   // stores the counts past since trigger 3 was set true
int angleChange = 0;

int state;
int amp;
const int filter = 0;
const int TRIGGER1 = 1;
const int TRIGGER2 = 2;
const int TRIGGER3 = 3;
const int FALL_ACTIVATION = 4;

int getAccAmp();
int getAngleAmp();
void mpu_read(); // MPU Function Prototype

void setup()
{
  Serial.begin(115200);
  Wire.begin();
  Wire.beginTransmission(MPU_addr);
  Wire.write(0x6B); // PWR_MGMT_1 register
  Wire.write(0);    // set to zero (wakes up the MPU-6050)
  Wire.endTransmission(true);
  state = filter;
}
void loop()
{
  if (state == filter) {
    mpu_read();
    amp = getAccAmp();
    if (amp <= 2 && trigger2 == false)
    { // if AM breaks lower threshold (0.4g)
      Serial.println("TRIGGER 1 ACTIVATED");
      state = TRIGGER1;
    }
  }
  else if (state == TRIGGER1)
  {
    mpu_read();
    amp = getAccAmp();
    trigger1count++;
    if (amp >= 12)
    { // if AM breaks upper threshold (3g)
      Serial.println("TRIGGER 2 ACTIVATED");
      trigger1count = 0;
      state = TRIGGER2;
    }
    if (trigger1count >= 6)
    { // allow 0.5s for AM to break upper threshold
      trigger1count = 0;
      Serial.println("TRIGGER 1 DECACTIVATED");
      state = filter;
    }
  }
  else if (state == TRIGGER2)
  {
    mpu_read();
    trigger2count++;
    angleChange = getAngleAmp();
    Serial.println(angleChange);
    if (angleChange >= 30 && angleChange <= 400)
    { // if orientation changes by between 80-100 degrees
      trigger2count = 0;
      Serial.println(angleChange);
      Serial.println("TRIGGER 3 ACTIVATED");
      state = TRIGGER3;
    }
    if (trigger2count >= 6)
    { // allow 0.5s for orientation change
      trigger2count = 0;
      Serial.println("TRIGGER 2 DECACTIVATED");
      state = filter;
    }
  }
  else if (state == TRIGGER3)
  {
    mpu_read();
    trigger3count++;
    if (trigger3count >= 10)
    {
      angleChange = getAngleAmp();
      Serial.println(angleChange);
      if ((angleChange >= 0) && (angleChange <= 10))
      { // if orientation changes remains between 0-10 degrees
        trigger3count = 0;
        Serial.println(angleChange);
        state = FALL_ACTIVATION;
      }
      else
      { // user regained normal orientation
        trigger3count = 0;
        Serial.println("TRIGGER 3 DEACTIVATED");
        state = filter;
      }
    }
  }
  else if (state == FALL_ACTIVATION)
  { // in event of a fall detection
    Serial.println("FALL DETECTED");
    state = filter;
  }
  delay(100);
}

void mpu_read()
{
  Wire.beginTransmission(MPU_addr);
  Wire.write(0x3B); // starting with register 0x3B (ACCEL_XOUT_H)
  Wire.endTransmission(false);
  Wire.requestFrom(MPU_addr, 14, true); // request a total of 14 registers
  AcX = Wire.read() << 8 | Wire.read(); // 0x3B (ACCEL_XOUT_H) & 0x3C (ACCEL_XOUT_L)
  AcY = Wire.read() << 8 | Wire.read(); // 0x3D (ACCEL_YOUT_H) & 0x3E (ACCEL_YOUT_L)
  AcZ = Wire.read() << 8 | Wire.read(); // 0x3F (ACCEL_ZOUT_H) & 0x40 (ACCEL_ZOUT_L)
  Tmp = Wire.read() << 8 | Wire.read(); // 0x41 (TEMP_OUT_H) & 0x42 (TEMP_OUT_L)
  GyX = Wire.read() << 8 | Wire.read(); // 0x43 (GYRO_XOUT_H) & 0x44 (GYRO_XOUT_L)
  GyY = Wire.read() << 8 | Wire.read(); // 0x45 (GYRO_YOUT_H) & 0x46 (GYRO_YOUT_L)
  GyZ = Wire.read() << 8 | Wire.read(); // 0x47 (GYRO_ZOUT_H) & 0x48 (GYRO_ZOUT_L)
}

int getAccAmp()
{
  // calibation
  ax = (AcX - 2050) / 16384.00;
  ay = (AcY - 77) / 16384.00;
  az = (AcZ - 1947) / 16384.00;
  gx = (GyX + 270) / 131.07;
  gy = (GyY - 351) / 131.07;
  gz = (GyZ + 136) / 131.07;
  // ขนาดความเร่งรวม
  float Raw_Amp = pow(pow(ax, 2) + pow(ay, 2) + pow(az, 2), 0.5);
  int Amp = Raw_Amp * 10; // Mulitiplied by 10 bcz values are between 0 to 1
  Serial.println(Amp);
  return Amp;
}

int getAngleAmp ()
{
  mpu_read();
  return pow(pow(gx, 2) + pow(gy, 2) + pow(gz, 2), 0.5);
}